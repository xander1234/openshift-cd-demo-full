def mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

pipeline {
  agent {
    label 'maven'
  }
  stages {
    stage('SCM pull') {
      steps {
        git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
      }
    }
    stage('Build App') {
      steps {
        sh "${mvnCmd} install -DskipTests=true"
      }
    }
    stage('Test') {
      steps {
        sh "${mvnCmd} test"
        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
      }
    }
    stage('Code Analysis') {
      steps {
        script {
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
        }
      }
    }
    stage('Archive App') {
      steps {
        sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
      }
    }
    stage('Build Image') {
      steps {
        sh "cp target/openshift-tasks.war target/ROOT.war"
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              openshift.selector("bc", "tasks").startBuild("--from-file=target/ROOT.war", "--wait=true")
            }
          }
        }
      }
    }
    stage('Deploy DEV') {
      steps {
        echo "Deploying container image to Development Project"
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              // Update the Config Map which contains the users for the Tasks application
              openshift.selector('configmap', 'tasks-config').delete()
              // Update the Config Map which contains the users for the Tasks application         
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')
              // Deploy the development application.
              openshift.selector("dc", "tasks").rollout().latest();

              // Wait for application to be deployed
              def dc = openshift.selector("dc", "tasks").object() 
              def dc_version = dc.status.latestVersion 
              def rc = openshift.selector("rc", "tasks-${dc_version}").object() 

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"

              while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }              
            }
          }//withCluster
        }
      }
    }
    stage('Promote to STAGE?') {
      agent {
        label 'skopeo'
      }
      steps {
        timeout(time:15, unit:'MINUTES') {
            input message: "Promote to STAGE?", ok: "Promote"
        }

        script {
          openshift.withCluster() {
            if (env.ENABLE_QUAY.toBoolean()) {
              withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                sh "skopeo copy docker://quay.io//tasks-app:latest docker://quay.io//tasks-app:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
              }
            } else {
              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage")
            }
          }
        }
      }
    }
    stage('Deploy STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              // Update the Config Map which contains the users for the Tasks application
              openshift.selector('configmap', 'tasks-config').delete()
              // Update the Config Map which contains the users for the Tasks application
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')
              // Deploy the development application.
              openshift.selector("dc", "tasks").rollout().latest();

              // Wait for application to be deployed
              def dc = openshift.selector("dc", "tasks").object() 
              def dc_version = dc.status.latestVersion 
              def rc = openshift.selector("rc", "tasks-${dc_version}").object() 

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"

              while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
            }
          }
        }
      }
    }










  }
}