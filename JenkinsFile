def mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

def destApp = "tasks-green"
def activeApp = ""

pipeline {
  agent {
    label 'maven'
  }
  stages {
    stage('Build App') {
      steps {
        git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
        sh "${mvnCmd} install -DskipTests=true"
      }
    }
    stage('Unit Test') {
      steps {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
      }
    }
    stage('Code Analysis') {
      steps {
        script {
          echo "Running Code Analysis"
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
        }
      }
    }
    // Publish the built war file to Nexus
    stage('Archive App') {
      steps {
        echo "Publish to Nexus"
        sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
      }
    }
    stage('Build Image') {
      steps {
        sh "cp target/openshift-tasks.war target/ROOT.war"
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              openshift.selector("bc", "tasks").startBuild("--from-file=target/ROOT.war", "--wait=true")
            }
          }
        }
      }
    }
    stage('Deploy DEV') {
      steps {
        echo "Deploying container image to Development Project"
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              // Update the Config Map which contains the users for the Tasks application
              openshift.selector('configmap', 'tasks-config').delete()
              // Update the Config Map which contains the users for the Tasks application         
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')
              // Deploy the development application.
              openshift.selector("dc", "tasks").rollout().latest();

              // Wait for application to be deployed
              def dc = openshift.selector("dc", "tasks").object() 
              def dc_version = dc.status.latestVersion 
              def rc = openshift.selector("rc", "tasks-${dc_version}").object() 

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"

              while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }              
            }
          }//withCluster
        }
      }
    }
    stage('Promote to STAGE?') {
      agent {
        label 'skopeo'
      }
      steps {
        timeout(time:15, unit:'MINUTES') {
            input message: "Promote to STAGE?", ok: "Promote"
        }

        script {
          openshift.withCluster() {
            if (env.ENABLE_QUAY.toBoolean()) {
              withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                sh "skopeo copy docker://quay.io//tasks-app:latest docker://quay.io//tasks-app:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
              }
            } else {
              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage")
            }
          }
        }
      }
    }

    stage('Deploy STAGE') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              // Update the Config Map which contains the users for the Tasks application
              openshift.selector('configmap', 'tasks-config').delete()
              // Update the Config Map which contains the users for the Tasks application
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')
              // Deploy the development application.
              openshift.selector("dc", "tasks").rollout().latest();

              // Wait for application to be deployed
              def dc = openshift.selector("dc", "tasks").object() 
              def dc_version = dc.status.latestVersion 
              def rc = openshift.selector("rc", "tasks-${dc_version}").object() 

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"

              while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
            }
          }
        }
      }
    }

    stage('Promote to Blue/Green Production?') {
      agent {
        label 'skopeo'
      }
      steps {
        timeout(time:15, unit:'MINUTES') {
            input message: "Promote to PROD?", ok: "Promote"
        }
        script {
          openshift.withCluster() {
            openshift.tag("${env.STAGE_PROJECT}/tasks:stage", "${env.PROD_PROJECT}/tasks:prod")
          }
        }        
      }
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    // Do not activate the new version yet.
    stage('Blue/Green Production Deployment') {
      steps {

      echo "Blue/Green Deployment"
        script {
          openshift.withCluster() {
            openshift.withProject(env.PROD_PROJECT) {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              if (activeApp == "tasks-green") {
              destApp = "tasks-blue"
              }

              echo "Active Application: " + activeApp
              echo "Destination Application: " + destApp
              // Update the Image on the Production Deployment Config
              def dc = openshift.selector("dc/${destApp}").object()
              // OpenShift 4
              // dc.spec.template.spec.containers[0].image = "image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${prodTag}"

              // OpenShift 3
              //dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"
              //openshift.apply(dc)

              // Update Config Map in change config files changed in the source
              openshift.selector("configmap", "${destApp}-config").delete()

              // Update the Config Map which contains the users for the Tasks application
              def configmap = openshift.create('configmap', "${destApp}-config", '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties')

              // Deploy the inactive application.
              openshift.selector("dc", "${destApp}").rollout().latest();

              // Wait for application to be deployed
              def dc_prod = openshift.selector("dc", "${destApp}").object() 
              def dc_version = dc_prod.status.latestVersion 
              def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object() 
              
              echo "Waiting for ${destApp} to be ready"
              
              while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                sleep 5
                rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
              }
            }
          }
        }
      }
    }
    
    stage('Switch over to new Version') {
      steps {
        input "Switch Production?"
        echo "Switching Production application to ${destApp}."
        /*
        timeout(time:15, unit:'MINUTES') {
            input message: "Promote to PROD?", ok: "Promote"
        }
        */
        script {
          openshift.withCluster() {
            openshift.withProject(env.PROD_PROJECT) {
            def route = openshift.selector("route/tasks").object()
            route.spec.to.name = "${destApp}"
            openshift.apply(route)
            }
          }
        }
      }
    }

  }
}